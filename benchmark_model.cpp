#include <iostream>
#include <chrono>
#include <random>
#include <immintrin.h>
#include <vector>
#include <utility>
#include "math_functions.h"
#include "tools.h"

// Generated by generate_sizes.py
std::vector<std::pair<size_t, size_t>> ModelWeightSizes = {
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 8640, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 8640, 3200 },
    { 3200, 3200 },
    { 8640, 3200 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 8640, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 8640, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 8640, 3200 },
    { 8640, 3200 },
    { 8640, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 8640, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 8640, 3200 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 8640, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 8640, 3200 },
    { 8640, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 8640, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 8640, 3200 },
    { 3200, 3200 },
    { 8640, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 8640, 3200 },
    { 3200, 8640 },
    { 8640, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 8640, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 8640, 3200 },
    { 8640, 3200 },
    { 8640, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 8640, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 8640, 3200 },
    { 8640, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
    { 8640, 3200 },
    { 3200, 3200 },
    { 3200, 8640 },
    { 3200, 3200 },
    { 3200, 3200 },
};

const size_t NUM_BENCHMARK_ITERATIONS = 100;

int main() {
    // Preallocate input vectors and output buffers
    std::vector<int8_t*> input_vectors;
    std::vector<int8_t*> mask_a_vectors;
    std::vector<int8_t*> mask_b_vectors;
    std::vector<int8_t*> output_buffers;

    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<int> dist(-128, 127);

    for (const auto& tensor_size : ModelWeightSizes) {
        size_t input_size = tensor_size.first;
        size_t output_size = tensor_size.second;

        int8_t* input_vector = allocate_aligned_buffer<int8_t>(input_size);
        int8_t* mask_a_vector = allocate_aligned_buffer<int8_t>(output_size * input_size);
        int8_t* mask_b_vector = allocate_aligned_buffer<int8_t>(output_size * input_size);
        int8_t* output_buffer = allocate_aligned_buffer<int8_t>(output_size);

        for (size_t i = 0; i < input_size; ++i) {
            input_vector[i] = static_cast<int8_t>(dist(gen));
        }

        for (size_t i = 0; i < output_size * input_size; ++i) {
            mask_a_vector[i] = static_cast<int8_t>(dist(gen));
            mask_b_vector[i] = static_cast<int8_t>(dist(gen));
        }

        input_vectors.push_back(input_vector);
        mask_a_vectors.push_back(mask_a_vector);
        mask_b_vectors.push_back(mask_b_vector);
        output_buffers.push_back(output_buffer);
    }

    // Benchmark iterations
    auto start_time = std::chrono::high_resolution_clock::now();
    for (size_t i = 0; i < NUM_BENCHMARK_ITERATIONS; ++i) {
        for (size_t j = 0; j < ModelWeightSizes.size(); ++j) {
            size_t input_size = ModelWeightSizes[j].first;
            size_t output_size = ModelWeightSizes[j].second;
            subtract_masked_arrays_2d(input_vectors[j], mask_a_vectors[j], mask_b_vectors[j],
                                      output_buffers[j], input_size, output_size);
        }
    }
    auto end_time = std::chrono::high_resolution_clock::now();

    // Calculate average time per iteration
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time);
    double avg_time = static_cast<double>(duration.count()) / NUM_BENCHMARK_ITERATIONS;

    // Print benchmark results
    std::cout << "Benchmark Results:" << std::endl;
    std::cout << "Number of Tensor Sizes: " << ModelWeightSizes.size() << std::endl;
    std::cout << "Number of Benchmark Iterations: " << NUM_BENCHMARK_ITERATIONS << std::endl;
    std::cout << "Average Time per Iteration: " << avg_time << " milliseconds" << std::endl;

    // Free allocated buffers
    for (size_t i = 0; i < ModelWeightSizes.size(); ++i) {
        free_aligned_buffer(input_vectors[i]);
        free_aligned_buffer(mask_a_vectors[i]);
        free_aligned_buffer(mask_b_vectors[i]);
        free_aligned_buffer(output_buffers[i]);
    }

    return 0;
}
